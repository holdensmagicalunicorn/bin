#!/bin/bash
# Calculates a path relative to the home directory.  That path is used to Sync 
# folders with a remote host.  
# 
# Home directories may differ, but the path relative to the home directory 
# is the same.  Under this configuration, it becomes simple to create and
# use the sync commands based on the current working directory.  
# 
# Unless you force it, this script will always preview and prompt before 
# actaully making changes.
# 
# Example:
#   /home/doej/projects/examples$ prj-rsync my_server1 (get|put)
# OR
#   /home/doej/projects/examples$ prj-rsync my_server1 (get|put) [path/]file
# 
# Sync ~/projects/examples from my_server1 account with 
# current directory (also ~/projects/examples).  
# 
#
# my_server1 can be some short made-up alias (in that case, interactivly prompt 
# and record the host and user) or this can be in the ssh format:
#
#   user@hostname
# 
# get - sync from server to local directory
# put - sync from local directory to server
# 
# Other commands are available by way of variables. 
# 
# Example:
#   echo= prj-rsync my_server1 get
# OR
#   force= prj-rsync my_server1 get
# 
# force - skip the the dry-run and 'are you sure'
# echo  - just echo the command and exit
# 
# Force and echo may be combined.

alias=$1
cmd=$2
path=$3

if test $# -lt 2 || test ! $(echo $cmd | egrep "get|put") 
then
   # Show usage above
   echo
   egrep "^# " $0 | sed -e 's/^# /  /g'
   echo
   exit 1 #1=error
fi

#############
#Environment
#
if test $(echo $alias | egrep "@")
then
   user_host=$alias
else
   . prj-env $alias,user,host
   user_host=$user${user:+@}$host
fi

#Example: /home/jcalfee/bin becomes ~/bin
rsync_path=`pwd|sed "s?$HOME?~?g"`

unset rsync_env_filters

test -f .rsync_includes && 
  rsync_env_filters="--include-from=.rsync_includes"
  
test -f .rsync_excludes && 
  rsync_env_filters="$rsync_env_filters --exclude-from=.rsync_excludes"
  
test -f .rsync_filters && 
  rsync_env_filters="$rsync_env_filters --filter='merge .rsync_filters'"

#############
function rsync_test_and_run {
  rsync_cmd=$1
  if test -n "${echo+x}"
  then
    if test -n "${force+x}"
    then
      echo rsync $rsync_cmd 
    else
      echo rsync $rsync_cmd --dry-run
    fi
    return
  fi
  tmp=`mktemp /tmp/rsync.XXXXXXXX`
  trap 'rm $tmp' EXIT
  
  if test -n "${force+x}"
  then
    echo rsync $rsync_cmd > $tmp
    sh $tmp
  else
    echo rsync $rsync_cmd --dry-run | tee $tmp
    sh $tmp
    read -p "Proceed (y/n)? " yn
    case $yn in
      [Yy] )
        echo rsync $rsync_cmd > $tmp
        sh $tmp
        ;;
      [Nn] ) return 1;;
      * ) echo "Please answer y or n.";;
    esac
  fi
}

#########
#Main
#
case "$cmd" in
"get") 
  echo DOWNLOAD...
  rsync_test_and_run "$rsync_env_filters --delete --compress -e ssh -va '$user_host${user_host:+:}$rsync_path/${path:-.}' '${path:-.}'"
;;
"put")
  echo UPLOAD...
  ${host:+ssh $user_host} mkdir -vp "$rsync_path"
  rsync_test_and_run "$rsync_env_filters --delete --compress -e ssh -va '${path:-.}' '$user_host${user_host:+:}$rsync_path/$path'"
;;

esac


